## DEPENDENCIAS UTILIZADAS:

    npm install react react-dom react-router-dom redux react-redux @reduxjs/toolkit bootstrap
    npm install --save-dev @types/react @types/react-dom @types/react-router-dom @types/redux @types/react-redux @types/bootstrap

    -Creación de los primeros componenetes y páginas: NavBar y Home 
    -Creación de la carpeta rutas y definición de las rutas
    -Creación del componente Login

     * Apartir de aqui ya empiezo a contruir el backend ya que Login ya requiere uso del servidor y una base de datos

     -Inicialización de un proyecto de Node dentro de la carpeta backend: 

        1- npm init -y    (cración del package.json para instalar las dependencias)

        2- Instalación de dependencias:
                -express: Para crear tu servidor.
                -cors: Para habilitar CORS, lo que permite que tu frontend se comunique con tu backend.
                -multer: Para manejar la carga de archivos (imágenes).
                -mongoose: Para interactuar con MongoDB.         ->IMPORTANTE: Mongoose, una librería de Node.js que facilita la interacción con MongoDB.<-
                -dotenv: Para manejar variables de entorno.
                -axios para realizar peticiones asincronas al servidor, también se puede utilizar fetch de forma nativa en React

                Dependencias: npm install express cors multer mongoose dotenv axios
        
        3- Configurar TypeScript para Node.js:

            npm install --save-dev typescript @types/node @types/express @types/cors @types/multer
        
        4- Crea un archivo de configuración de TypeScript:

            npx tsc --init   (creará el archivo tsconfig.json)

            Ajusta el archivo tsconfig.json para compilar a JavaScript para Node.js. Asegúrate de establecer "target" a "ES6" y "module" a "commonjs".

        5- Creación del servidor express con las rutas:

            archivos server.ts y routesServer.ts

        6- importante si voy a utilizar el sistema de importación de modulos de javascript ES Modules en el que se usa import definir :

             "type": "module", (en el archivo package.json)

            ya que node.js por defecto utiliza el sistema de modulos commonJs con require        

        7- COMPILACIÓN DEL CÓDIGO TYPESCRIPT A JAVASCRIPT (NODE.JS NECESITA HACER LA CONVERSIÓN YA QUE NO INTERPRETA CODIGO TYPESCRIPT)
        
            Importante la estructura de carpetas y archivos para la configuración 

            Ejecutar  (npx tsc) para convertir el código typescript a javascript se creará automáticamente una carpeta llamada dist

            para que no de errores y la carpeta se cree con el código ya convertido a javascript para que node lo entienda hay que mantener la siguinete estructura:
            
                                server/
                ├── dist/                   # Carpeta que contendrá el código compilado (generado tras la compilación)
                ├── node_modules/           # Carpeta de dependencias de Node.js
                ├── package.json            # Archivo de configuración de npm
                ├── package-lock.json       # Archivo de bloqueo de versiones de npm
                ├── tsconfig.json           # Archivo de configuración de TypeScript
                └── src/                    # Carpeta que contiene el código fuente en TypeScript
                    ├── server.ts           # Archivo principal del servidor
                    └── routerServer.ts     # Archivo de rutas del servidor

            Importante también indicar en el archivo tsconfig.json donde se encuentran los archivos con código .ts para poder encontrarlos y convertirlos :

            
                            {
                "compilerOptions": {
                    "target": "ES2016",                               
                    "module": "ESNext",                               /* Usa ES Modules en lugar de CommonJS */
                    "moduleResolution": "node",                       /* Usa la resolución de módulos de Node.js */
                    "esModuleInterop": true,                          /* Facilita la interoperabilidad entre módulos ES y CommonJS */
                    "forceConsistentCasingInFileNames": true,         /* Asegura que los nombres de archivo sean consistentes en los imports */
                    "strict": true,                                   /* Habilita las opciones de verificación de tipos estrictas */
                    "skipLibCheck": true,                             /* Omite la comprobación de tipos en archivos de definición de biblioteca */
                    "outDir": "./dist",                               /* Especifica la carpeta de salida para los archivos compilados */
                    "rootDir": "./src"                                /* Especifica la carpeta raíz de los archivos fuente (contiene los archivos .ts)*/
                },
                "include": ["src"],                                 /* Incluye la carpeta de código fuente (contiene los archivos .ts)*/
                "exclude": ["node_modules"]                         /* Excluye la carpeta node_modules */
                }   

        8- Arranque del servidor    

            node dist/server.js   (ejecutar en ruta server)

        9- MUY IMPORTANTE todos los archivos del backend que contengan código .ts es decir, carpeta de controllers y models tiene que ir dentro de src que es la ubicación dada en la configuración    

            Una vez avanza el proceso de login para registrar un usuario y tenemos los archivos controller y model del login hace falta una base de datos 

        10- Vamos a usar MongoDB Atlas para la base de datos en la nube y Mongoose como ODM (Object Data Modeling) para interactuar con MongoDB desde tu aplicación de Node.js.

        instalación: npm install mongoose


        11- En este proyecto utilizaré redux-persist para mantener las sesiones iniciadas y datos consistentes como la foto de login y el nombre:

            Instalación de redux-persist:  

            Instalación de tipos para redux-persist: npm install --save-dev @types/redux-persist (en caso de usar typescript)

        *Nota para que carguen las imágenes correctamente definir la ruta adecuada en routesServer.ts: (solo funciona si la carpeta la creamos dentro de dist)
            dist en donde se almacena el código compilado de ts a js para que node.js pueda entenderlo y ejecutarlo
            
            // Configuración de almacenamiento para multer
            const storage = multer.diskStorage({
                destination: path.join(__dirname, '../dist/uploads'), // Guardar imágenes en "uploads"
                filename: (req, file, cb) => {
                    cb(null, `${Date.now()}-${file.originalname}`); // Nombre único para cada archivo
                },
            });    



########PROCESO DE ARRANQUE DEL PROYECTO :########

    1.Arrancar el servidor Express:

        C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\server> node dist/server.js


    2. Activar la Compilación Automática con Modo de Vigilancia: compilación de archivos .ts de la carpeta src a .js en la carpeta dist

        npx tsc --watch (dentro de server)

        
    3. Levantar el Servidor de Desarrollo de React: (dentro de la carpeta client en el Frontend)

        C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> npm run dev



       
## PARA POR DESPLEGAR UN PROYECTO FULLSTACK CON UN SERVIDOR Y UN BACKEND EN VERCEL ##

1.cambiar todas las peticiones que actualmente apuntan a tu servidor local (localhost o 127.0.0.1) en tu frontend y
redirigirlas a la URL de tu servidor que está alojado en Vercel:

    // Antes (cuando estaba en local)
    fetch('http://localhost:5000/api/books')
    .then(response => response.json())
    .then(data => console.log(data));

    // Después (ahora en producción en Vercel)
    fetch('https://your-vercel-app.vercel.app/api/books')
    .then(response => response.json())
    .then(data => console.log(data));

2.Usa Variables de Entorno: Para facilitar la transición entre entornos (desarrollo y producción), puedes usar variables de entorno. 
Así no tendrás que cambiar manualmente las URLs cada vez que pases de un entorno a otro.

    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

    fetch(`${API_URL}/api/books`)
    .then(response => response.json())
    .then(data => console.log(data));

3.Esquema de Comunicación Frontend-Servidor en Vercel

    +--------------------+        HTTP Request         +------------------------+       Database Access      +---------------------+
|  React Frontend    |   --------------------->    |  Express Backend (Vercel)|   --------------------->   |   MongoDB Atlas      |
|  (Vercel)          |                              |  API Endpoints          |                             |  (Cloud)             |
|                    |   <---------------------    |  Serveless Functions     |   <---------------------   |                     |
+--------------------+        HTTP Response         +------------------------+       Query Results         +---------------------+


Flujo de Comunicación:

1-React Frontend (cliente):

    El frontend de React está desplegado en Vercel como un sitio estático.
    El usuario interactúa con la interfaz.
    Cuando el usuario necesita datos (como libros desde Google Books o tu base de datos), se realiza una petición HTTP desde el frontend al backend (Express) también alojado en Vercel.

2-Express Backend (servidor):

    El backend es un servidor Express configurado como servidor sin estado (serverless) en Vercel. Esto significa que cada endpoint es manejado como una función independiente, desplegada y gestionada por Vercel.
    El backend procesa la petición, por ejemplo, buscando libros o accediendo a la base de datos MongoDB Atlas.
    Responde al frontend con los datos necesarios (en JSON, por ejemplo).

3-MongoDB Atlas (base de datos):

    El backend se conecta remotamente a MongoDB Atlas para realizar las consultas necesarias a la base de datos.
    La base de datos responde con los datos, que son enviados de vuelta al frontend a través del servidor Express.



    ## AHORA EL PROYECTO TIENE EL MODO PRODUCCIÓN Y EL MODO DESARROLLO ##

    "scripts": {
  "dev": "vite",                           // Para desarrollo
  "build": "tsc -b && vite build",         // Para construir el frontend y backend para producción
  "start": "vite preview",                 // Para servir la versión de producción
  "preview": "vite preview",               // Para previsualizar la versión de producción localmente
  "lint": "eslint ."
}

-npm run dev: Ejecuta un servidor de desarrollo local con recarga en caliente y herramientas de depuración, para trabajar en el proyecto(development mode).

-npm run preview: Será útil cuando desees previsualizar la producción localmente antes de desplegarla.

-npm run build: Construye la aplicación para producción (optimizada, lista para desplegar).

-npm start: Ahora servirá la aplicación en modo de producción. Esto es lo que usarías al desplegar o para simular el entorno de producción.



## MUY IMPORTANTE PARA PERMITIR ACCESO A MI BASE DE DATOS MONGO DB CUANDO LA API ESTA ALOJADA EN VERCEL ##

    Para permitir que tu aplicación desplegada en Vercel (o cualquier otro servicio de hosting) se conecte correctamente a MongoDB Atlas, debes cambiar 
    la configuración de acceso en MongoDB de la siguiente manera:

    Permitir conexiones desde cualquier IP:

    En el panel de MongoDB Atlas, ve a la sección de Network Access.
    Haz clic en Add IP Address.
    En el cuadro de diálogo, selecciona la opción Allow access from anywhere. Esto añadirá 0.0.0.0/0, lo que permitirá que cualquier dirección IP 
    (incluidas las direcciones IP de Vercel) se conecte a tu clúster.


    
<!-- name_proyect
  /client  
    /dist
        index...css
        index...js
      /assets
    index.html  
    /node_modules
    /public
      index.html
    /src
      /assets  
      /components  
      /pages  
      /redux
      /routes
    App.tsx
    main.tsx
    package.json
    ...
  /server
    /dist
    /node_modules
    /src
      -config
      -controllers
      -models
      -services
  vercel.json


-->
    

    ##MUY IMPORTANTE PARA PODER DESPLEGAR EL PROYECTO BACKEND A PRODUCCION##

*Captura de la terminal de VSC

    PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> npm install

up to date, audited 198 packages in 7s

43 packages are looking for funding

1 high severity vulnerability

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> npm audit
# npm audit report

rollup  4.0.0 - 4.22.3
Severity: high
fix available via `npm audit fix`
node_modules/rollup

1 high severity vulnerability

To address all issues, run:
  npm audit fix

changed 3 packages, and audited 198 packages in 5s

43 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> vercel --prod
Vercel CLI 37.6.0
? Set up and deploy “~\Desktop\Proyectos personales con React\beyound_the_pages\client”? yes
? Which scope do you want to deploy to? David's projects
? Link to existing project? yes
? What’s the name of your existing project? beyond-the-pages
🔗  Linked to davids-projects-5a52dd2e/beyond-the-pages (created .vercel and added it to .gitignore)
🔍  Inspect: https://vercel.com/davids-projects-5a52dd2e/beyond-the-pages/4ZgxkgMrG66MSj2WQrrMBMg5DevX [5s]
✅  Production: https://beyond-the-pages-leqigj3o5-davids-projects-5a52dd2e.vercel.app [5s]
PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client>

Comandos de Vercel CLI
Al ejecutar comandos de Vercel como vercel o vercel --prod, la CLI genera y utiliza el directorio .vercel para gestionar tu proyecto. Aquí hay un resumen de algunos comandos comunes:

vercel: Despliega tu aplicación y crea una nueva URL para el entorno de previsualización.
vercel --prod: Despliega tu aplicación en producción, actualizando la URL de producción.



*nota: Esto es porque el frontend (donde haces las solicitudes) está corriendo 
en https://beyond-the-pages-leqigj3o5-davids-projects-5a52dd2e.vercel.app y el backend (la API) está en https://beyond-the-pages-three.vercel.app.


¡Excelente! Has completado el despliegue inicial de tu proyecto en Vercel. Vamos a desglosar lo que ves y qué pasos debes seguir a continuación.

### Análisis del Resultado

1. **Vercel CLI**: La línea `Vercel CLI 37.6.0` indica la versión del CLI de Vercel que estás utilizando. Es bueno mantenerlo actualizado, pero esta versión es completamente funcional.

2. **Enlace de Inspección**: 
   - `🔍  Inspect: https://vercel.com/davids-projects-5a52dd2e/beyond-the-pages/8n1CReto9s5iJ2xqigi1rcBtarNv`
   - Este enlace te lleva a la interfaz de Vercel donde puedes ver los detalles del despliegue actual. Puedes ver información sobre los logs, configuraciones y el estado del proyecto.

3. **Enlace de Vista Previa**:
   - `✅  Preview: https://beyond-the-pages-6devgc4kk-davids-proyectos-5a52dd2e.vercel.app`
   - Este es el enlace donde puedes ver tu aplicación en acción. Es una versión de vista previa, que puedes usar para probar tu aplicación antes de hacer el despliegue final a producción.

4. **Instrucciones para Despliegue a Producción**:
   - `📝  To deploy to production (beyond-the-pages-seven.vercel.app), run vercel --prod`
   - Aquí, Vercel te está dando instrucciones para desplegar tu aplicación en producción. El comando `vercel --prod` publicará tu aplicación en la URL final de producción.

### Pasos a Seguir

Ahora que has realizado un despliegue de vista previa, puedes proceder a los siguientes pasos:

#### 1. Revisa la Aplicación en Vista Previa
- Abre el enlace de vista previa en tu navegador: [Vista Previa de tu aplicación](https://beyond-the-pages-6devgc4kk-davids-proyectos-5a52dd2e.vercel.app).
- Asegúrate de que todo funcione como se espera. Verifica que todas las páginas, imágenes, enlaces y funcionalidades estén operativas.
- Comprueba la consola del navegador para detectar cualquier error de JavaScript o advertencias.

#### 2. Despliegue a Producción
Una vez que estés satisfecho con la vista previa y todo esté funcionando correctamente, puedes proceder a desplegarlo en producción. Haz lo siguiente:

- En la terminal, ejecuta el siguiente comando:

   ```bash
   vercel --prod
   ```

- Este comando realizará el despliegue en la URL de producción, que normalmente es algo como `https://beyond-the-pages-<algún-id>.vercel.app`, o si ya existe, puede utilizar un nombre que hayas definido anteriormente.

#### 3. Verifica el Despliegue de Producción
- Después de ejecutar el comando anterior, espera a que Vercel complete el despliegue. Una vez finalizado, te dará un enlace de producción.
- Visita ese enlace en tu navegador y realiza las mismas verificaciones que hiciste con la vista previa.

#### 4. Manejo de Errores (si ocurren)
- Si encuentras algún error durante el despliegue o en la versión de producción:
  - Puedes ver los logs para más información utilizando:

   ```bash
   vercel logs <tu-dominio>
   ```

  - Revisa el enlace de inspección que te proporcionó Vercel para ver más detalles sobre cualquier error que pueda haber ocurrido.

### Consideraciones Finales

- **Revisar Configuraciones de Producción**: Asegúrate de que todas las configuraciones necesarias, como variables de entorno y configuraciones de API, estén configuradas correctamente en el panel de control de Vercel.
- **Mantenimiento**: Después del despliegue, recuerda que puedes hacer cambios en tu código, y luego puedes volver a ejecutar `vercel` o `vercel --prod` para desplegar nuevas versiones.

Si todo se ve bien y funciona correctamente, ¡tu aplicación debería estar en vivo! Si tienes más preguntas o necesitas más ayuda, no dudes en preguntar.


## ÚLTIMO DESPLIEGUE EN VERCEL ##

PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> vercel --prod        
Vercel CLI 37.6.0
🔍  Inspect: https://vercel.com/davids-projects-5a52dd2e/beyond-the-pages/7Pewf2ThTLoaxr4zYsJq7sFPNndV [2s]
✅  Production: https://beyond-the-pages-kporvhnyh-davids-projects-5a52dd2e.vercel.app [2s]
PS C:\Users\David\Desktop\Proyectos personales con React\beyound_the_pages\client> 