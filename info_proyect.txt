## DEPENDENCIAS UTILIZADAS:

    npm install react react-dom react-router-dom redux react-redux @reduxjs/toolkit bootstrap
    npm install --save-dev @types/react @types/react-dom @types/react-router-dom @types/redux @types/react-redux @types/bootstrap

    -Creación de los primeros componenetes y páginas: NavBar y Home 
    -Creación de la carpeta rutas y definición de las rutas
    -Creación del componente Login

     * Apartir de aqui ya empiezo a contruir el backend ya que Login ya requiere uso del servidor y una base de datos

     -Inicialización de un proyecto de Node dentro de la carpeta backend: 

        1- npm init -y    (cración del package.json para instalar las dependencias)

        2- Instalación de dependencias:
                -express: Para crear tu servidor.
                -cors: Para habilitar CORS, lo que permite que tu frontend se comunique con tu backend.
                -multer: Para manejar la carga de archivos (imágenes).
                -mongoose: Para interactuar con MongoDB.         ->IMPORTANTE: Mongoose, una librería de Node.js que facilita la interacción con MongoDB.<-
                -dotenv: Para manejar variables de entorno.
                -axios para realizar peticiones asincronas al servidor, también se puede utilizar fetch de forma nativa en React

                Dependencias: npm install express cors multer mongoose dotenv axios
        
        3- Configurar TypeScript para Node.js:

            npm install --save-dev typescript @types/node @types/express @types/cors @types/multer
        
        4- Crea un archivo de configuración de TypeScript:

            npx tsc --init   (creará el archivo tsconfig.json)

            Ajusta el archivo tsconfig.json para compilar a JavaScript para Node.js. Asegúrate de establecer "target" a "ES6" y "module" a "commonjs".

        5- Creación del servidor express con las rutas:

            archivos server.ts y routesServer.ts

        6- importante si voy a utilizar el sistema de importación de modulos de javascript ES Modules en el que se usa import definir :

             "type": "module", (en el archivo package.json)

            ya que node.js por defecto utiliza el sistema de modulos commonJs con require        

        7- COMPILACIÓN DEL CÓDIGO TYPESCRIPT A JAVASCRIPT (NODE.JS NECESITA HACER LA CONVERSIÓN YA QUE NO INTERPRETA CODIGO TYPESCRIPT)
        
            Importante la estructura de carpetas y archivos para la configuración 

            Ejecutar  (npx tsc) para convertir el código typescript a javascript se creará automáticamente una carpeta llamada dist

            para que no de errores y la carpeta se cree con el código ya convertido a javascript para que node lo entienda hay que mantener la siguinete estructura:
            
                                server/
                ├── dist/                   # Carpeta que contendrá el código compilado (generado tras la compilación)
                ├── node_modules/           # Carpeta de dependencias de Node.js
                ├── package.json            # Archivo de configuración de npm
                ├── package-lock.json       # Archivo de bloqueo de versiones de npm
                ├── tsconfig.json           # Archivo de configuración de TypeScript
                └── src/                    # Carpeta que contiene el código fuente en TypeScript
                    ├── server.ts           # Archivo principal del servidor
                    └── routerServer.ts     # Archivo de rutas del servidor

            Importante también indicar en el archivo tsconfig.json donde se encuentran los archivos con código .ts para poder encontrarlos y convertirlos :

            
                            {
                "compilerOptions": {
                    "target": "ES2016",                               
                    "module": "ESNext",                               /* Usa ES Modules en lugar de CommonJS */
                    "moduleResolution": "node",                       /* Usa la resolución de módulos de Node.js */
                    "esModuleInterop": true,                          /* Facilita la interoperabilidad entre módulos ES y CommonJS */
                    "forceConsistentCasingInFileNames": true,         /* Asegura que los nombres de archivo sean consistentes en los imports */
                    "strict": true,                                   /* Habilita las opciones de verificación de tipos estrictas */
                    "skipLibCheck": true,                             /* Omite la comprobación de tipos en archivos de definición de biblioteca */
                    "outDir": "./dist",                               /* Especifica la carpeta de salida para los archivos compilados */
                    "rootDir": "./src"                                /* Especifica la carpeta raíz de los archivos fuente (contiene los archivos .ts)*/
                },
                "include": ["src"],                                 /* Incluye la carpeta de código fuente (contiene los archivos .ts)*/
                "exclude": ["node_modules"]                         /* Excluye la carpeta node_modules */
                }   

        8- Arranque del servidor    

            node dist/server.js   (ejecutar en ruta server)

        9- MUY IMPORTANTE todos los archivos del backend que contengan código .ts es decir, carpeta de controllers y models tiene que ir dentro de src que es la ubicación dada en la configuración    

            Una vez avanza el proceso de login para registrar un usuario y tenemos los archivos controller y model del login hace falta una base de datos 

        10- Vamos a usar MongoDB Atlas para la base de datos en la nube y Mongoose como ODM (Object Data Modeling) para interactuar con MongoDB desde tu aplicación de Node.js.

        instalación: npm install mongoose


        11- En este proyecto utilizaré redux-persist para mantener las sesiones iniciadas y datos consistentes como la foto de login y el nombre:

            Instalación de redux-persist:  

            Instalación de tipos para redux-persist: npm install --save-dev @types/redux-persist (en caso de usar typescript)

        *Nota para que carguen las imágenes correctamente definir la ruta adecuada en routesServer.ts: (solo funciona si la carpeta la creamos dentro de dist)
            dist en donde se almacena el código compilado de ts a js para que node.js pueda entenderlo y ejecutarlo
            
            // Configuración de almacenamiento para multer
            const storage = multer.diskStorage({
                destination: path.join(__dirname, '../dist/uploads'), // Guardar imágenes en "uploads"
                filename: (req, file, cb) => {
                    cb(null, `${Date.now()}-${file.originalname}`); // Nombre único para cada archivo
                },
            });    




